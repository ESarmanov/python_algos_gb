"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""


#####################################################################################################
### сложность алгоритма линейная O(N)
def f_max():
    # найдем максимум по списку значений
    v_max = max(v_revenue_lst)
    # по найденному значению найдем компанию с этой прибылью. Внесем найденную компанию в список
    # удалим из копии списка-прибыли найденное макс.знаение.
    for v_name, v_revenue in company_list.items():
        if v_revenue == v_max:
            v_company_max.append(v_name)
            v_revenue_lst.remove(v_revenue)


#####################################################################################################

# задаем словарь "компания":прибыль
company_list = {"FiftyFifty": 65536, "Eddison": 2456, "HardIron": 77875567, "Drom": 123, "BigMCk": 9968868, "GQ": 65536}

############## вариант 1.
# сложность зависит от вызываемой процедуры f_max.
# делаем копию списка по всем прибылям
v_revenue_lst = list(company_list.values())

# тут будет хранится конечный спмсок из найденных компаний
v_company_max = []

# вызываем 3 раза процедуру для поиска максимального значения
f_max()
f_max()
f_max()

# список из компаний TOP-3 по прибыли. Возвращает 4 значения, т.к. в TOP-3 входит 4 компании
print("Вариант 1. Получившийся список TOP-3 компаний:", v_company_max)

#####################################################################################################

##############     вариант 2.
# сложность O(N log (N))
# тут будет хранится конечный спмсок из найденных компаний
v_company_max = []

# делаем копии-списки по всем компаниям и всем прибылям
v_revenue_lst = sorted(list(company_list.values()), reverse=True)
i = 0
while i <= 2:
    v_max = v_revenue_lst[i]
    for v_name, v_revenue in company_list.items():
        if v_revenue == v_max:
            v_company_max.append(v_name)
    i += 1

print("Вариант 2. Получившийся список TOP-3 компаний:", v_company_max)

"""
эффективнее вариант 1, его сложность линейная.
e варианта 2 логарифмическая сложность   
"""