"""
2.	Посчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).

Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной. При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены

Используем операции % //, НЕ ИСПОЛЬЗУЕМ ОПЕРАЦИИ ВЗЯТИЯ ЭЛЕМЕНТА ПО ИНДЕКСУ

Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7

Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""


def sum_even(num, even=0, not_even=0):

    if num == 0:
        return (even, not_even)

    num, rest = divmod(num, 10)

    if rest % 2 == 0:
        return sum_even(num, even + 1, not_even)  # четное число
    else:
        return sum_even(num, even, not_even + 1)  # нечетное число


num = input("поиск четных/нечетных чисел, введите число >>> ")
if num.isdigit():
    print(f"Количество (четных, нечетных) цифр в числе равно: {sum_even(int(num))}")
else:
    print("Это не число, поиск невозможен")